# A MujinAPI definition of the Hand-Eye Calibration Task.
# Used to generate handeyecalibrationcontrollerclient.py

include:
- components.yaml
components:
  primarySensorSelectionInfo:
    type: object
    description: Selects the primary camera that everything will be calibrated against.
  secondarySensorSelectionInfos:
    type: array
    description: Selects the secondary camera(s) (assumed to be nearby the primary sensor).
    items:
      type: object
  gridindex:
    type: int
    description: The index of the voxel 
  calibboardvisibility:
    type: object
  toolname:
    type: string
  calibboardLinkName:
    type: string
  calibboardGeomName:
    type: string
  calibboardObjectName:
    type: string
  minPatternTiltAngle:
    type: number
    description: "The minimum tilt of the pattern in degrees. Default: 10 degrees"
  maxPatternTiltAngle: 
    type: number
    description: "The maximum tilt of the pattern in degrees. Default: 30 degrees"
  robot:
    $merge: '#/components/robot'
info:
  description: The API of the Planning Server for a Calibration task.
mujinapi: 0.0.1
services:  # The API of the calibration task
  ComputeCalibrationPoses:
    description: "Compute a set of calibration poses that satisfy the angle constraints using latin hypercube sampling (or stratified sampling upon failure)"
    parameters:
      $merge: '#/components/StandardPlanningServerRequestParameters'
      taskparams:
        properties:
          taskparameters:
            properties: 
              primarySensorSelectionInfo:
                $merge: '#/components/primarySensorSelectionInfo'
                isRequired: true
              secondarySensorSelectionInfos:
                $merge: '#/components/secondarySensorSelectionInfos'
                isRequired: true
              numsamples:
                description: Number of samples to take. A reasonable number is often between 5 and 25.
                type: integer
                isRequired: true
              calibboardvisibility:
                $merge: '#/components/calibboardvisibility'
                isRequired: true
              toolname:
                $merge: '#/components/toolname'
                isRequired: true
              calibboardLinkName:
                $merge: '#/components/calibboardLinkName'
              calibboardGeomName:
                $merge: '#/components/calibboardGeomName'
              calibboardObjectName:
                $merge: '#/components/calibboardObjectName'
              minPatternTiltAngle: 
                $merge: '#/components/minPatternTiltAngle'
              maxPatternTiltAngle: 
                $merge: '#/components/maxPatternTiltAngle'
              dynamicEnvironmentState:
                $merge: '#/components/dynamicEnvironmentState'
              robot:
                $merge: '#/components/robot'
    returns: {}
  SampleCalibrationConfiguration:
    description: Sample a valid calibration pose inside the given voxel and find a corresponding IK solution.
    parameters:
      $merge: '#/components/StandardPlanningServerRequestParameters'
      taskparams:
        properties:
          taskparameters:
            properties: 
              primarySensorSelectionInfo:
                $merge: '#/components/primarySensorSelectionInfo'
                isRequired: true
              secondarySensorSelectionInfos:
                $merge: '#/components/secondarySensorSelectionInfos'
                isRequired: true
              gridindex:
                $merge: '#/components/gridindex'
                isRequired: true
              calibboardvisibility: 
                $merge: '#/components/calibboardvisibility'
                isRequired: true
              toolname:
                $merge: '#/components/toolname'
                isRequired: true
              calibboardLinkName: 
                $merge: '#/components/calibboardLinkName'
              calibboardGeomName: 
                $merge: '#/components/calibboardGeomName'
              calibboardObjectName:
                $merge: '#/components/calibboardObjectName'
              minPatternTiltAngle: 
                $merge: '#/components/minPatternTiltAngle'
              maxPatternTiltAngle: 
                $merge: '#/components/maxPatternTiltAngle'
              dynamicEnvironmentState:
                $merge: '#/components/dynamicEnvironmentState'
              robot:
                $merge: '#/components/robot'
    returns:
      type: object
      properties:
        vConfig:
          description: The IK solution (joint angles) for the sample.
          type: array
          items:
            type: number