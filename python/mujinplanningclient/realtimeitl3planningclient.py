# Copyright (C) 2012-2023 Mujin, Inc.

# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

from . import json
from . import realtimerobotplanningclient

import logging
log = logging.getLogger(__name__)

class RealtimeITL3PlanningClient(realtimerobotplanningclient.RealtimeRobotPlanningClient):
    """Mujin planning client for the RealtimeITL3 task"""
    _robotname = None  # Optional name of the robot selected
    _robotspeed = None  # Speed of the robot, e.g. 0.4
    _robotaccelmult = None  # Current robot accel mult
    _envclearance = None  # Environment clearance in millimeters, e.g. 20
    _robotBridgeConnectionInfo = None  # dict holding the connection info for the robot bridge.
    

    def __init__(
        self,
        robotname='',
        robotspeed=None,
        robotaccelmult=None,
        envclearance=10.0,
        robotBridgeConnectionInfo=None,
        scenepk='',
        controllerip='',
        controllerusername='',
        controllerpassword='',
        controllerurl='',
        tasktype='realtimeitl3',
        slaverequestid=None,
        taskzmqport=7110,
        taskheartbeatport=7111,
        taskheartbeattimeout=7.0,
        ctx=None,
        author=None,
        **ignoredArgs  # Additional keyword args are not used, but allowed for easy initialization from a dictionary
    ):
        """Connects to the Mujin controller, initializes RealtimeITL3 task and sets up parameters

        Args:
            robotname (str, optional): Name of the robot, e.g. VP-5243I
            robotspeed (float, optional): Speed of the robot, e.g. 0.4
            robotaccelmult (float, optional): Optional multiplier for the robot acceleration.
            envclearance (str, optional): Environment clearance in millimeter, e.g. 20
            robotBridgeConnectionInfo (str, optional): dict holding the connection info for the robot bridge.
            scenepk (str, optional): Primary key (pk) of the scene, e.g. irex_demo.mujin.dae
            controllerip (str): IP or hostname of the mujin controller, e.g. 172.17.0.2 or controller123
            controllerusername (str): Username for the Mujin controller, e.g. testuser
            controllerpassword (str): Password for the Mujin controller
            controllerurl (str, optional): (Deprecated. Use controllerip instead) URL of the mujin controller, e.g. http://controller14.
            tasktype (str, optional): Type of the task, e.g. 'binpicking', 'handeyecalibration', 'itlrealtimeplanning3'. Default: realtimeitl3
            taskzmqport (int, optional): Port of the task's ZMQ server, e.g. 7110
            taskheartbeatport (int, optional): Port of the task's ZMQ server's heartbeat publisher, e.g. 7111
            taskheartbeattimeout (float, optional): Seconds until reinitializing task's ZMQ server if no heartbeat is received, e.g. 7
            ctx (zmq.Context, optional): Seconds until reinitializing task's ZMQ server if no heartbeat is received, e.g. 7
        """
        super(RealtimeITL3PlanningClient, self).__init__(robotname=robotname, robotspeed=robotspeed, robotaccelmult=robotaccelmult, envclearance=envclearance, robotBridgeConnectionInfo=robotBridgeConnectionInfo,taskzmqport=taskzmqport, taskheartbeatport=taskheartbeatport, taskheartbeattimeout=taskheartbeattimeout, tasktype=tasktype, scenepk=scenepk, ctx=ctx, slaverequestid=slaverequestid, controllerurl=controllerurl, controllerusername=controllerusername, controllerpassword=controllerpassword, author=author)

    
    #
    # Generated commands
    #

    # ============== Auto-generated code starts here

    def SetJointValues(self, jointvalues, robotname=None, timeout=10, **kwargs):
        """

        Args:
            jointvalues (list[float]):
            robotname (str, optional): Name of the robot
            timeout (float, optional): (Default: 10)
        """
        taskparameters = {
            'command': 'SetJointValues',
            'jointvalues': jointvalues,
        }
        if robotname is not None:
            taskparameters['robotname'] = robotname
        taskparameters.update(kwargs)
        return self.ExecuteCommand(taskparameters, timeout=timeout)

    def GetITLState(self, robotname=None, timeout=10, fireandforget=False, **kwargs):
        """

        Args:
            robotname (str, optional): Name of the robot
            timeout (float, optional): (Default: 10)
            fireandforget (bool, optional):
        """
        taskparameters = {
            'command': 'GetITLState',
        }
        if robotname is not None:
            taskparameters['robotname'] = robotname
        taskparameters.update(kwargs)
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def ExecuteTrajectory(self, identifier, trajectories, statevalues=None, stepping=False, istep=None, cycles=1, restorevalues=None, envclearance=15, robotspeed=None, robotaccelmult=None, timeout=10, fireandforget=False):
        """

        Args:
            identifier:
            trajectories:
            statevalues:
            stepping: (Default: False)
            istep:
            cycles: (Default: 1)
            restorevalues:
            envclearance (float, optional): Environment clearance in millimeters. (Default: 15)
            robotspeed (float, optional): Value in (0,1] defining the percentage of speed the robot should move at.
            robotaccelmult (float, optional): Value in (0,1] defining the percentage of acceleration the robot should move at.
            timeout (float, optional): (Default: 10)
            fireandforget (bool, optional):
        """
        taskparameters = {
            'command': 'ExecuteTrajectory',
            'identifier': identifier,
            'trajectories': trajectories,
            'stepping': stepping,
            'cycles': cycles,
            'envclearance': envclearance,
        }
        if statevalues is not None:
            taskparameters['statevalues'] = statevalues
        if istep is not None:
            taskparameters['istep'] = istep
        if restorevalues is not None:
            taskparameters['restorevalues'] = restorevalues
        if robotspeed is not None:
            taskparameters['robotspeed'] = robotspeed
        if robotaccelmult is not None:
            taskparameters['robotaccelmult'] = robotaccelmult
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def ExecuteTrajectoryStep(self, reverse=False, envclearance=None, robotspeed=None, robotaccelmult=None, timeout=10, fireandforget=False):
        """

        Args:
            reverse (bool, optional):
            envclearance (float, optional): Environment clearance in millimeters.
            robotspeed (float, optional): Value in (0,1] defining the percentage of speed the robot should move at.
            robotaccelmult (float, optional): Value in (0,1] defining the percentage of acceleration the robot should move at.
            timeout (float, optional): (Default: 10)
            fireandforget (bool, optional):
        """
        taskparameters = {
            'command': 'ExecuteTrajectoryStep',
            'reverse': reverse,
        }
        if envclearance is not None:
            taskparameters['envclearance'] = envclearance
        if robotspeed is not None:
            taskparameters['robotspeed'] = robotspeed
        if robotaccelmult is not None:
            taskparameters['robotaccelmult'] = robotaccelmult
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def PauseExecuteTrajectory(self, timeout=10, fireandforget=False):
        """

        Args:
            timeout (float, optional): (Default: 10)
            fireandforget (bool, optional):
        """
        taskparameters = {
            'command': 'PauseExecuteTrajectory',
        }
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def ResumeExecuteTrajectory(self, timeout=10, fireandforget=False):
        """

        Args:
            timeout (float, optional): (Default: 10)
            fireandforget (bool, optional):
        """
        taskparameters = {
            'command': 'ResumeExecuteTrajectory',
        }
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def ComputeRobotConfigsForCommandVisualization(self, executiongraph, commandindex=0, timeout=2, fireandforget=False, **kwargs):
        """

        Args:
            executiongraph:
            commandindex: (Default: 0)
            timeout (float, optional): (Default: 2)
            fireandforget (bool, optional):
        """
        taskparameters = {
            'command': 'ComputeRobotConfigsForCommandVisualization',
            'executiongraph': executiongraph,
            'commandindex': commandindex,
        }
        taskparameters.update(kwargs)
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def ComputeRobotJointValuesForCommandVisualization(self, program, commandindex=0, timeout=2, fireandforget=False, **kwargs):
        """

        Args:
            program:
            commandindex: (Default: 0)
            timeout (float, optional): (Default: 2)
            fireandforget (bool, optional):
        """
        taskparameters = {
            'command': 'ComputeRobotJointValuesForCommandVisualization',
            'program': program,
            'commandindex': commandindex,
        }
        taskparameters.update(kwargs)
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def PlotProgramWaypoints(self, timeout=1, fireandforget=True, **kwargs):
        """

        Args:
            timeout (float, optional): (Default: 1)
            fireandforget (bool, optional): (Default: True)
        """
        taskparameters = {
            'command': 'PlotProgramWaypoints',
        }
        taskparameters.update(kwargs)
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def StartITLProgram(self, programName, robotspeed=None, robotaccelmult=None, timeout=10, fireandforget=False, **kwargs):
        """

        Args:
            programName:
            robotspeed:
            robotaccelmult:
            timeout (float, optional): (Default: 10)
            fireandforget (bool, optional):
        """
        taskparameters = {
            'command': 'StartITLProgram',
            'programName': programName,
        }
        if robotspeed is not None:
            taskparameters['robotspeed'] = robotspeed
        if robotaccelmult is not None:
            taskparameters['robotaccelmult'] = robotaccelmult
        taskparameters.update(kwargs)
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def StopITLProgram(self, timeout=10, fireandforget=False, **kwargs):
        """Stops the ITL program

        Args:
            timeout (float, optional): (Default: 10)
            fireandforget (bool, optional):
        """
        taskparameters = {
            'command': 'StopITLProgram',
        }
        taskparameters.update(kwargs)
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def GenerateExecutionGraph(self, programName, commandTimeout=0.2, totalTimeout=1.0, timeout=10, fireandforget=False, **kwargs):
        """Generates a list of commands for the ITL program.

        Args:
            programName:
            commandTimeout: (Default: 0.2)
            totalTimeout: (Default: 1.0)
            timeout (float, optional): (Default: 10)
            fireandforget (bool, optional):
        """
        taskparameters = {
            'command': 'GenerateExecutionGraph',
            'programName': programName,
            'commandTimeout': commandTimeout,
            'totalTimeout': totalTimeout,
        }
        taskparameters.update(kwargs)
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def PlotContacts(self, report=None, timeout=1, fireandforget=False, **kwargs):
        """

        Args:
            report (dict, optional):
            timeout (float, optional): (Default: 1)
            fireandforget (bool, optional):
        """
        taskparameters = {
            'command': 'PlotContacts',
        }
        if report is not None:
            taskparameters['report'] = report
        taskparameters.update(kwargs)
        return self.ExecuteCommand(taskparameters, timeout=timeout, fireandforget=fireandforget)

    def PopulateTargetInContainer(self, locationName, populateTargetUri, populateFnName, containerMetaData=None, timeout=20, **kwargs):
        """Populates targets in container using populateFn.

        Args:
            locationName:
            populateTargetUri:
            populateFnName:
            containerMetaData (dict, optional):
            timeout (float, optional): (Default: 20)
        """
        taskparameters = {
            'command': 'PopulateTargetInContainer',
            'locationName': locationName,
            'populateTargetUri': populateTargetUri,
            'populateFnName': populateFnName,
        }
        if containerMetaData is not None:
            taskparameters['containerMetaData'] = containerMetaData
        taskparameters.update(kwargs)
        return self.ExecuteCommand(taskparameters, timeout=timeout)



# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
